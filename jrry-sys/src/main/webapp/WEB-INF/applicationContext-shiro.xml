<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login"/>
        <property name="successUrl" value="/index"/>
        <property name="unauthorizedUrl" value="/unauthorized"/>
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                /resources/** = anon
                # some example chain definitions:
                /sys/** = authc, roles[admin]
                # /docs/** = authc, perms[document:read]
                /sample/** = authc,roles[admin]
                /** = authc
                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <!--<bean id="someFilter" class="..."/>-->
    <!--<bean id="anotherFilter" class="..."> ... </bean>-->

    <!--https://shiro.apache.org/web.html#Web-DefaultFilters-->
    <!--<bean id="anon" class="org.apache.shiro.web.filter.authc.AnonymousFilter"/>-->
    <!--<bean id="authc" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"/>-->
    <!--<bean id="authcBasic" class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter"/>-->
    <!--<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter"/>-->
    <!--<bean id="noSessionCreation" class="org.apache.shiro.web.filter.session.NoSessionCreationFilter"/>-->
    <!--<bean id="perms" class="org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter"/>-->
    <!--<bean id="port" class="org.apache.shiro.web.filter.authz.PortFilter"/>-->
    <!--<bean id="rest" class="org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter"/>-->
    <!--<bean id="roles" class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter"/>-->
    <!--<bean id="ssl" class="org.apache.shiro.web.filter.authz.SslFilter"/>-->
    <!--<bean id="user" class="org.apache.shiro.web.filter.authc.UserFilter"/>-->

    <!--<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">-->
    <!--<property name="sessionIdCookieEnabled" value="true"/>-->
    <!--<property name="sessionIdUrlRewritingEnabled" value="true"/>-->
    <!--</bean>-->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!--<property name="sessionManager" ref="sessionManager"/>-->
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <constructor-arg index="0" value="SHA-512"/>
    </bean>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="saltStyle" value="COLUMN"/>
        <property name="authenticationQuery"
                  value="select password,password_salt from sys_user where is_deleted = 0 and username = ?"/>
        <property name="userRolesQuery" value="select role_name from sys_user_role_relation where username = ?"/>
        <property name="permissionsQuery"
                  value="select permission from sys_role_permission_relation where role_name = ?"/>
        <property name="permissionsLookupEnabled" value="false"/>
    </bean>
</beans>